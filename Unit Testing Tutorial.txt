Unit Testing Angular 4 Tutorial
================================
  Prerequisites: Jasmine JS (beginner level experience required)

In this example, lets's build the calculator component and add a few unit test cases.

For this example I create a new project namely 'my-unit-testing', you can create a new  or use existing project. This tutorial should help you get some idea about writing test cases using Jasmine inside angular 4/5 app.

Angular App has all the essential setup related to Jasmine and Karma for us to run unit testing. 
karma.conf.js has that setup. Learn more about this file here 
https://karma-runner.github.io/1.0/config/configuration-file.html

Jasmine is a behavior driven testing framework. Learn more about it here 
https://jasmine.github.io/2.1/introduction

We know that the angular app has test specs in it. By default the app has 'app.component.spec.ts' in it. Everything is properly wired up.

Step 1: All you have to do now is run a command 'ng test' in cmd prompt 
Step 2: A browser window will be opened that will show about unit test case's status. By default, the 3 test cases will be passing. Stop for while!. 

Let's learn about few more things before going deeper into unit testing. Karma is the test runner built by Angular JS 1.x team, the same is now used alongside angular 4 to help us execute unit testing. karma.conf.js has all the configurations/setup about how to run the unit tests inside angular 4/5 apps.

Step3: Open the test.ts file to find out the supporting conf for karma to run spec files when we execute the command 'ng test'. test.ts has some code comments that explain a few vital things. tsconfig.spec.json also has few more wiring up.

Step 4: Now, is the time to jump into unit testing. In my codebase I have app.component.spec.ts and I have added code comments there. Have a look at them.

Step 5: I hope you have completed testing the component. Remember you need to refresh your knowledge on Jasmin before writing many test cases. Now, let's learn about adding test case in our own custom component.
  I create a new component 'ng g c calc' 

  I have added some functionality in calc component. look at calc.component.html and calc.component.ts files. I have added two methods namely add() and subtract() and many test cases there. 
  You can build on it and write your own test cases. in place of multiply and divide you can write your own test cases. Once you write your specs will fail. Then you need to fix them by adding such methods in calc.component.ts.

  That's how the things should go on. That is behavior driven testing.

Step 6: Enough of testing a component. LEt's learn about testing a service. 
I create a service. ng g s services/calc. So, I got calc.service.ts, calc.service.spec.ts
I have added a comment to help you out testing the service also. After writing test specs you should write the code in calc.service.ts also.

Step 7: All test specs will run in order. If you want to skip some test cases for the whole component or service, follow the steps below.
 If you don't want test specs to be tested for calcComponent, instead of describe you should specify an 'xdescribe'.

 xdescribe('CalcComponent', () => {
 }

 The above will not be tested.

Step8: If you want to run only one tests and not all, follow the step.
If you want test specs to be tested ONLY for calcComponent not for other components or services, instead of describe you should specify an 'fdescribe'.

  fdescribe('CalcComponent', () => {
  }



 




